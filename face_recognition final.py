# -*- coding: utf-8 -*-
"""FACE_RECOGNITION

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Acd-_tKOs7FmtnacPxg6AS8-LhVSjSMB
"""

import numpy as np

import cv2

from keras.applications import vgg16

from keras.preprocessing import image

from google.colab import drive
drive.mount('/content/drive/')

image_rows, image_cols=224,224

model=vgg16.VGG16(weights='imagenet', include_top = False, input_shape = (image_rows, image_cols, 3))

model.layers

model.layers[0].input

for  layer in model.layers:
    layer.trainable = False

for (i,layer) in enumerate(model.layers):
    print(str(i) + " "+ layer.__class__.__name__, layer.trainable)

def createModel(bottom_model, num_classes):
    """creates the top or head of the model that will be 
    placed ontop of the bottom layers"""

    top_model = bottom_model.output
    top_model = GlobalAveragePooling2D()(top_model)
    top_model = Dense(1024,activation='relu')(top_model)
    top_model = Dense(1024,activation='relu')(top_model)
    top_model = Dense(512,activation='relu')(top_model)
    top_model = Dense(num_classes,activation='softmax')(top_model)
    return top_model



from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, GlobalAveragePooling2D
from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D
from keras.layers.normalization import BatchNormalization
from keras.models import Model


num_classes = 4

FC_Head = createModel(model, num_classes)

modelnew = Model(inputs = model.input, outputs = FC_Head)

print(modelnew.summary())

from keras.preprocessing.image import ImageDataGenerator

train_data_dir = '/content/drive/My Drive/Colab Notebooks/face recog/train_dataset'
validation_data_dir = '/content/drive/My Drive/Colab Notebooks/face recog/test_dataset'

# Let's use some data augmentaiton 
train_datagen = ImageDataGenerator(
      rescale=1./255,
      rotation_range=20,
      width_shift_range=0.2,
      height_shift_range=0.2,
      horizontal_flip=True,
      fill_mode='nearest')
 
validation_datagen = ImageDataGenerator(rescale=1./255)

# set our batch size 
batch_size = 12
 
train_generator = train_datagen.flow_from_directory(
        train_data_dir,
        target_size=(image_rows, image_cols),
        batch_size=batch_size,
        class_mode='categorical')
 
validation_generator = validation_datagen.flow_from_directory(
        validation_data_dir,
        target_size=(image_rows, image_cols),
        batch_size=batch_size,
        class_mode='categorical')

s= validation_generator.class_indices
t=train_generator.class_indices
print(s)
print(t)

from keras.optimizers import RMSprop
from keras.callbacks import ModelCheckpoint, EarlyStopping


                     
checkpoint = ModelCheckpoint("task2.h5",
                             monitor="val_loss",
                             mode="min",
                             save_best_only = True,
                             verbose=1)

earlystop = EarlyStopping(monitor = 'val_loss', 
                          min_delta = 0, 
                          patience = 3,
                          verbose = 1,
                          restore_best_weights = True)


callbacks = [earlystop, checkpoint]

# We use a small learning rate 
modelnew.compile(loss = 'categorical_crossentropy',
              optimizer = RMSprop(lr = 0.001),
              metrics = ['accuracy'])




nb_train_samples = 166
nb_validation_samples =99

# We train 20 EPOCHS 
epochs = 8
batch_size = 16

history = modelnew.fit_generator(
    train_generator,
    steps_per_epoch = nb_train_samples // batch_size,
    epochs = epochs,
    callbacks = callbacks,
    validation_data = validation_generator,
    validation_steps = nb_validation_samples // batch_size)

modelnew.save("test2.h5")

from keras.models import load_model
from keras.preprocessing import image
from keras.applications.vgg16 import preprocess_input
from keras.applications.vgg16 import decode_predictions
from keras.applications.vgg16 import VGG16
from skimage import color

m = load_model('task2.h5')

testing= image.load_img('/content/drive/My Drive/Colab Notebooks/face recog/new/test/s.JPG',target_size=(224,224,3))

type(testing)

testing

test_image = image.img_to_array(testing)

type(test_image)

test_image.shape

import numpy as np
#testing1.shape

test_image2= np.expand_dims(test_image, axis=0)
#result = m.predict(testing1)

test_image2.shape

result = m.predict(test_image2)

result

result2 = train_generator.class_indices

result2

classname= ['Gopa', 'LOPA','Pramod','Satya']

final_result=classname[np.argmax(result)]

final_result